import os
import logging
from elevenlabs_tts import generate_speech, get_voice_id  # Uses your existing code
from dotenv import load_dotenv

load_dotenv()
logging.basicConfig(level=logging.INFO)

def test_tts_call(language="hi", test_text="‡§®‡§Æ‡§∏‡•ç‡§§‡•á, ‡§Ü‡§™ ‡§ï‡•à‡§∏‡•á ‡§π‡•à‡§Ç?", test_output="test_output.mp3"):
    print(f"\nüß™ Testing ElevenLabs TTS for language: {language}")
    api_key = os.getenv("ELEVENLABS_API_KEY")
    if not api_key:
        print("‚ùå ELEVENLABS_API_KEY not set in .env")
        return

    try:
        voice_id = get_voice_id(language)
        print(f"‚úÖ Using Voice ID: {voice_id}")
    except Exception as e:
        print(f"‚ùå Failed to get voice ID: {str(e)}")
        return

    success = generate_speech(test_text, language, output_path=test_output)

    if success and os.path.exists(test_output):
        size_kb = round(os.path.getsize(test_output) / 1024, 2)
        print(f"‚úÖ Speech generation successful. File saved: {test_output} ({size_kb} KB)")
    else:
        print("‚ùå Speech generation failed.")

if __name__ == "__main__":
    # You can call this with different languages
    test_tts_call("en", "Hello! This is a test message.")
    test_tts_call("hi", "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Ø‡§π ‡§è‡§ï ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§π‡•à‡•§")
    test_tts_call("te", "‡∞π‡∞≤‡±ã! ‡∞á‡∞¶‡∞ø ‡∞í‡∞ï ‡∞™‡∞∞‡±Ä‡∞ï‡±ç‡∞∑‡∞æ ‡∞∏‡∞Ç‡∞¶‡±á‡∞∂‡∞Ç.")
